check_defined = $(foreach 1,$1,$(__check_defined))
__check_defined = \
    $(if $(value $1),, \
      $(error Undefined $1$(if $(value 2), ($(strip $2)))))
	  
copy_file = @if [ -a $1 ]; then \
		echo Copying $$(basename $1); \
		mkdir -p $$(dirname $2); \
		cp -f $1 $2; \
	else \
		echo Cannot find $$(basename $1) in $$(dirname $1); \
		exit 1; \
	fi;

	  
ifneq ($(MAKECMDGOALS),clean)
  $(call check_defined, NAME, name of the bin)
  $(call check_defined, BIN_TYPE, type of the bin [exec|shared|static])
  $(call check_defined, INSTALL_DIR, dir of the install)
endif

DEPENDENCIES ?=

CXX ?= g++
AR ?= ar

CFLAGS ?= -Wall -Werror -std=gnu++17
ARFLAGS := cru

INCLUDE_DIRS += -I/usr/local/include

SRC_DIR ?= ./src
TMP_DIR ?= ./tmp
OBJ_DIR ?= $(TMP_DIR)/obj
DEP_DIR ?= $(TMP_DIR)/depend
BIN_DIR ?= ./bin
LIB_DIR ?= ./lib
INC_DIR ?= $(SRC_DIR)/includes
LOCAL ?= /usr/local
LOCAL_BIN ?= $(LOCAL)/bin
LOCAL_INC ?= $(LOCAL)/include
LOCAL_LIB ?= $(LOCAL)/lib
INSTALL_BIN_DIR ?= $(LOCAL_BIN)/$(INSTALL_DIR)
INSTALL_INC_DIR ?= $(LOCAL_INC)/$(INSTALL_DIR)
INSTALL_LIB_DIR ?= $(LOCAL_LIB)/$(INSTALL_DIR)

TEST_DIR ?= ./_test
TEST_BIN ?= $(NAME)_test.exe
TEST_EXEC ?= $(TEST_DIR)/bin/$(TEST_BIN)

CPP_FILES ?= $(subst $(SRC_DIR)/,,$(shell find $(SRC_DIR) -type f -name '*.cpp'))
HPP_FILES ?= $(subst $(SRC_DIR)/,,$(shell find $(SRC_DIR) -type f -name '*.hpp'))
DEP_FILES := $(CPP_FILES:%.cpp=$(DEP_DIR)/%.d)
OBJ_FILES := $(CPP_FILES:%.cpp=$(OBJ_DIR)/%.o)

ifneq ($(MAKECMDGOALS),clean)
  ifeq ($(BIN_TYPE),exec)
    TARGET_EXT := exe
    TARGET_DIR := $(BIN_DIR)
  else ifeq ($(BIN_TYPE),shared)
    TARGET_EXT := dll
    TARGET_DIR := $(BIN_DIR)
	CFLAGS += -D LIB_BUILD -shared -Wl,--out-implib=$(LIB_DIR)/lib$(NAME).dll.a
  else ifeq ($(BIN_TYPE),static)
    TARGET_EXT := a
    TARGET_DIR := $(LIB_DIR)
  else
	$(error Wrong bin type: [exec|shared|static])
  endif
endif

ifeq ($(BIN_TYPE),static)
TARGET := $(TARGET_DIR)/lib$(NAME).$(TARGET_EXT)
else
TARGET := $(TARGET_DIR)/$(NAME).$(TARGET_EXT)
endif

.PHONY: all depend clean test install uninstall

	
all: $(TARGET) $(DEPENDENCIES)

depend: $(DEPENDENCIES)

ifneq ($(MAKECMDGOALS),clean)
-include $(DEP_FILES)
endif

$(TARGET): $(OBJ_FILES)
	@echo Linking $@
	@mkdir -p $(BIN_DIR)
	@mkdir -p $(LIB_DIR)
ifeq ($(BIN_TYPE),static)
	$(AR) $(ARFLAGS) $(TARGET) $(OBJ_FILES) $(LIBS_PATH)
else
	$(CXX) $(CFLAGS) $(OBJ_FILES) $(LIB_DIRS) $(LIBS) -o $(TARGET)
endif
		
$(OBJ_FILES): $(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo Compiling $<
	@mkdir -p `dirname $(patsubst %, $(DEP_DIR)/%.d, $*)`
	@mkdir -p `dirname $@`
	$(CXX) $(CFLAGS) $(INCLUDE_DIRS) -MT $@ -MMD -MP -MF $(patsubst %, $(DEP_DIR)/%.d, $*) -c -o $@ $<

clean:
	rm -rf $(TMP_DIR)
	rm -rf $(BIN_DIR)
	rm -rf $(LIB_DIR)
	@( \
        cd $(TEST_DIR); \
        make clean; \
    )

install: $(TARGET)
ifeq ($(strip $(INSTALL_INC_DIR)),)
else
	@echo Installing includes into $(INSTALL_INC_DIR)
	@mkdir -p $(INSTALL_INC_DIR)
	@cp -rf $(INC_DIR)/* $(INSTALL_INC_DIR)
endif
ifeq ($(strip $(INSTALL_BIN_DIR)),)
else
	@echo Installing bin into $(INSTALL_BIN_DIR)
	@mkdir -p $(INSTALL_BIN_DIR)
	@cp -rf $(BIN_DIR)/* $(INSTALL_BIN_DIR)
endif
ifeq ($(strip $(INSTALL_LIB_DIR)),)
else
	@echo Installing lib into $(INSTALL_LIB_DIR)
	@mkdir -p $(INSTALL_LIB_DIR)
	@cp -rf $(LIB_DIR)/* $(INSTALL_LIB_DIR)
endif

uninstall:
ifeq ($(strip $(INSTALL_INC_DIR)),)
else
	@echo Uninstalling includes from $(INSTALL_INC_DIR)
	@rm -rf $(INSTALL_INC_DIR)
endif
ifeq ($(strip $(INSTALL_BIN_DIR)),)
else
	@echo Uninstalling bin from $(INSTALL_BIN_DIR)
	@rm -rf $(INSTALL_BIN_DIR)
endif
ifeq ($(strip $(INSTALL_LIB_DIR)),)
else
	@echo Uninstalling lib from $(INSTALL_LIB_DIR)
	@rm -rf $(INSTALL_LIB_DIR)
endif

test: $(TARGET) $(DEPENDENCIES) $(TEST_EXEC)
	@( \
		cd $(TEST_DIR); \
		make test; \
	)

$(TEST_EXEC):
	@( \
		echo -------------------------------------------; \
		echo Start make tests; \
		echo -------------------------------------------; \
		cd $(TEST_DIR); \
		make all; \
		echo -------------------------------------------; \
		echo End make tests; \
		echo -------------------------------------------; \
	)